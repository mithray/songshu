const logUpdate = require('log-update')
const padString = require('./padString.js')
const getHash = require('./getHash.js')
const c = require('ansi-colors')
const si = require('si-tools')

const frames = [
    '⠁',
    '⠁',
    '⠉',
    '⠙',
    '⠚',
    '⠒',
    '⠂',
    '⠂',
    '⠒',
    '⠲',
    '⠴',
    '⠤',
    '⠄',
    '⠄',
    '⠤',
    '⠠',
    '⠠',
    '⠤',
    '⠦',
    '⠖',
    '⠒',
    '⠐',
    '⠐',
    '⠒',
    '⠓',
    '⠋',
    '⠉',
    '⠈',
    '⠈'
]
//let complete = '=≔͇⦀▶‣⦀❘i=͇=➤⇛    ⫼⫸⦀⦀⦀⦀＝‗❚❚➤❚❙➤▶▶❘▶'
let complete = '•'
let end_progress = '‣'

async function toSi(number) {
    let siunits
    try {
        siunits =
            (await si.format(number).replace(/([0-9]*)\.[0-9]*/, '$1')) + '/s'
    } catch {
        console.log(number)
    }
    return siunits
}

async function hashTest() {
    let difficulty = 1.8 ** 18
    let ms_to_test = 10000
    let padded = padString('abc')
    let i = 0
    let count = 0
    let start_time = Date.now()
    let elapsed_time = 0
    let bar_length = 40
    let hash_per_second = 0
    let interval = setInterval(async () => {
        hash_per_second = (await (count * difficulty)) / (elapsed_time / 1000)
        hps_format = await toSi(hash_per_second)
        let percent = Math.floor((100 * elapsed_time) / ms_to_test)
        let progress =
            complete.repeat(percent / (100 / bar_length)) + end_progress
        let testing = 'testing hash power'
        let gap = ""
        try {
            gap = ' '.repeat(bar_length - progress.length - testing.length)
        } catch {}
        let empty_progress = gap + testing
        const frame = frames[(i = ++i % frames.length)]
        logUpdate(`
    ${c.green(frame)}${progress}${c.dim(empty_progress)} ${percent}% ${c.green(
            hps_format
        )}
`)
        /*
    ${frame} ...testing hash speed with argon2id... ${frame}
         */
    }, 80)
    while (true) {
        elapsed_time = Date.now() - start_time
        if (elapsed_time > ms_to_test) break
        let hash = await getHash(padded, difficulty)
        count++
        elapsed_time = Date.now() - start_time
    }

    clearInterval(interval)
    logUpdate.clear()
    hash_per_second = (count * difficulty) / (elapsed_time / 1000)
    //console.log('hps1: ' + hash_per_second)
    hps_format =
        si.format(hash_per_second).replace(/([0-9]*)\.[0-9]*/, '$1') + '/s'
    console.log(`\n\tHashing power is ${c.green(hps_format)}\n`)
}

hashTest()
